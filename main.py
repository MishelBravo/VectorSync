from flask import Flask, request, jsonify, render_template
import mysql.connector
from mysql.connector import Error
from flask import Flask, render_template, request, redirect

app = Flask(__name__)

# Conexi√≥n global a la base de datos
db_connection = None
query_executed = False

def connect_to_dbA():
    global db_connection
    try:
        # Solo conectar si no hay una conexi√≥n activa
        if db_connection is None or not db_connection.is_connected():
            db_connection = mysql.connector.connect(
                host="localhost",
                user="root",
                password="admin",
                database="db_aeropuerto_a"
            )
            if db_connection.is_connected():
                print("üîå Conectado a db_aeropuerto_a en MySQL")
        return db_connection
    except Error as err:
        print(f"‚ùå Error al conectar con db_aeropuerto_a: {err}")
        return None


# Diccionario actualizado de pa√≠ses por continente
countries = {
    "√Åfrica": [
        "Argelia", "Angola", "Ben√≠n", "Botsuana", "Burkina Faso", "Burundi", "Cabo Verde", 
        "Camer√∫n", "Rep√∫blica Centroafricana", "Chad", "Comoras", "Congo", "Rep√∫blica Democr√°tica del Congo", 
        "Costa de Marfil", "Djibouti", "Egipto", "Guinea Ecuatorial", "Eritrea", "Esuatini", "Etiop√≠a", 
        "Gab√≥n", "Gambia", "Ghana", "Guinea", "Guinea-Bis√°u", "Kenia", "Lesoto", "Liberia", "Libia", 
        "Madagascar", "Malawi", "Mal√≠", "Mauricio", "Mauritania", "Mozambique", "Namibia", "N√≠ger", "Nigeria", 
        "Ruanda", "Santo Tom√© y Pr√≠ncipe", "Senegal", "Seychelles", "Sierra Leona", "Somalia", "Sud√°frica", 
        "Sud√°n", "Tanzania", "Togo", "T√∫nez", "Uganda", "Zambia", "Zimbabue"
    ],
    "Asia": [
        "Afganist√°n", "Armenia", "Azerbaiy√°n", "Bahrein", "Banglad√©s", "Birmania (Myanmar)", "But√°n", "Brun√©i", 
        "Camboya", "China", "Chipre", "Corea del Norte", "Corea del Sur", "Emiratos √Årabes Unidos", 
        "Georgia", "India", "Indonesia", "Irak", "Ir√°n", "Israel", "Jap√≥n", "Jordania", "Kazajist√°n", 
        "Kenia", "Kuwait", "Kirgist√°n", "Laos", "L√≠bano", "Malasia", "Maldivas", "Mongolia", "Nepal", "Om√°n", 
        "Pakist√°n", "Palestina", "Filipinas", "Qatar", "Rusia", "Arabia Saudita", "Singapur", "Sri Lanka", 
        "Siria", "Tayikist√°n", "Tailandia", "Timor Oriental", "Turkmenist√°n", "Emiratos √Årabes Unidos", 
        "Uzbekist√°n", "Vietnam", "Yemen"
    ],
    "Europa": [
        "Albania", "Alemania", "Andorra", "Armenia", "Austria", "B√©lgica", "Bielorrusia", "Bosnia y Herzegovina", 
        "Bulgaria", "Chipre", "Croacia", "Dinamarca", "Eslovaquia", "Eslovenia", "Espa√±a", "Estonia", "Finlandia", 
        "Francia", "Georgia", "Grecia", "Hungr√≠a", "Irlanda", "Islandia", "Italia", "Kazajist√°n", "Kosovo", 
        "Letonia", "Liechtenstein", "Lituania", "Luxemburgo", "Malta", "Moldavia", "M√≥naco", "Montenegro", "Noruega", 
        "Pa√≠ses Bajos", "Polonia", "Portugal", "Reino Unido", "Rep√∫blica Checa", "Ruman√≠a", "San Marino", "Serbia", 
        "Suecia", "Suiza", "Ucrania"
    ],
    "Sudam√©rica": [
        "Argentina", "Bolivia", "Brasil", "Chile", "Colombia", "Ecuador", "Guyana", "Paraguay", "Per√∫", "Surinam", 
        "Uruguay", "Venezuela"
    ],
    "Norteam√©rica": [
        "Canad√°", "Estados Unidos", "M√©xico"
    ],
    "Ocean√≠a": [
        "Australia", "Fiyi", "Islas Marshall", "Micronesia", "Nauru", "Nueva Zelanda", "Palau", "Pap√∫a Nueva Guinea", 
        "Samoa", "Islas Salom√≥n", "Tonga", "Tuvalu", "Vanuatu"
    ],
    "Ant√°rtida": [
        "Ant√°rtida"
    ]
}


# Ruta principal para mostrar la p√°gina
@app.route('/')
def home():
    results = execute_query_and_print()  # Ejecuta la consulta para obtener los resultados
    airports = {  # Crear un diccionario de aeropuertos de origen y destino
        "origen": [],
        "destino": []
    }
    
    # Llenar los aeropuertos de origen y destino
    for result in results:
        airports["origen"].append(result['Descripcion_Aeropuerto_Origen'])
        airports["destino"].append(result['Descripcion_Aeropuerto_Destino'])

    return render_template('index.html', airports=airports)  # Pasar los datos a index.html


@app.route('/connect', methods=['POST'])
def connect():
    country = request.json.get('country')
    continent = None

    # Identificar continente
    for cont, country_list in countries.items():
        if country in country_list:
            continent = cont
            break

    response = {"message": ""}

    # Determinar a qu√© servidor conectar
    if continent in ["Europa", "Asia", "√Åfrica"]:
        # Conectar a MySQL (dbaeropuerto_a)
        response["message"] = f"Conectado a dbaeropuerto_a en (MYSQL-Europa) ({continent})."
        connect_to_dbA()  # Conectar a dbaeropuerto_a

    elif continent == "Norteam√©rica":
        # Conectar a Firebase (dbaeropuerto_b)
        response["message"] = "Conectado a dbaeropuerto_b en Firebase (Norteam√©rica)."
        connect_to_dbA()  # Conectar a dbaeropuerto_b

    elif continent == "Sudam√©rica":
        # Conectar a MySQL (dbaeropuerto_c)
        response["message"] = "Conectado a dbaeropuerto_c en MySQL (Sudam√©rica)."
        connect_to_dbA()  # Conectar a dbaeropuerto_c

    else:
        response["message"] = "No hay servidores disponibles para este continente."

    return jsonify(response)


# Ejecutar la consulta
def execute_query_and_print():
    try:
        if db_connection is None or not db_connection.is_connected():
            print("üîå Intentando conectar a la base de datos...")
            connect_to_dbA()  # Conectar a la base de datos si no est√° conectado

        cursor = db_connection.cursor(dictionary=True)
        # Nueva consulta con JOINs
        query = """
        SELECT 
            rc.idRutaComercial, 
            aeo.descripcion AS Descripcion_Aeropuerto_Origen, 
            aed.descripcion AS Descripcion_Aeropuerto_Destino 
        FROM 
            RutaComercial rc 
        JOIN 
            Aeropuerto aeo ON rc.fk_idAeropuertoOrigen = aeo.idAeropuerto 
        JOIN 
            Aeropuerto aed ON rc.fk_idAeropuertoDestino = aed.idAeropuerto;
        """
        print(f"Ejecutando consulta: {query}")
        cursor.execute(query)
        results = cursor.fetchall()  # Obtener todos los resultados de la consulta
        print(f"Resultados obtenidos: {results}")  # Imprimir los resultados

        cursor.close()  # Cerrar el cursor despu√©s de la consulta
        return results  # Devolver los resultados para la respuesta
    except Error as err:
        print(f"‚ùå Error al ejecutar la consulta: {err}")
        return []


#----------------------------------------------------------------------------------------------------------------------------------------------
@app.route('/buscar_vuelos', methods=['POST'])
def buscar_vuelos():
    data = request.get_json()
    origen = data['origin']
    destino = data['destination']
    fecha = data['date']

    conn = connect_to_dbA()
    cursor = conn.cursor(dictionary=True)

    query = """
        SELECT 
            v.idVuelo, 
            v.fechaSalida, 
            v.horaSalida, 
            v.estado, 
            a1.descripcion AS Origen, 
            a2.descripcion AS Destino,
            al.nombreAerolinea,
            av.nombreAvion,
            av.tipoAvion
        FROM Vuelo v
        JOIN RutaComercial r ON v.RutaComercial_idRutaComercial = r.idRutaComercial
        JOIN Aeropuerto a1 ON r.fk_idAeropuertoOrigen = a1.idAeropuerto
        JOIN Aeropuerto a2 ON r.fk_idAeropuertoDestino = a2.idAeropuerto
        JOIN Aerolinea al ON v.Aerolinea_idAerolinea = al.idAerolinea
        JOIN Avion av ON v.Avion_idAvion = av.idAvion
        WHERE 
            a1.descripcion = %s
            AND a2.descripcion = %s
            AND v.fechaSalida = %s;
    """

    cursor.execute(query, (origen, destino, fecha))
    vuelos = cursor.fetchall()

    conn.close()

    # Convertir los datos a texto o formato adecuado para pasar al frontend
    vuelos_texto = []
    for vuelo in vuelos:
        vuelo_data = {
            'idVuelo': vuelo['idVuelo'],
            'fechaSalida': str(vuelo['fechaSalida']),
            'horaSalida': str(vuelo['horaSalida']),
            'estado': vuelo['estado'],
            'origen': vuelo['Origen'],
            'destino': vuelo['Destino'],
            'nombreAerolinea': vuelo['nombreAerolinea'],
            'nombreAvion': vuelo['nombreAvion'],
            'tipoAvion': vuelo['tipoAvion']
        }
        vuelos_texto.append(vuelo_data)

    # Enviar los datos como texto (JSON) o en formato plano si prefieres
    return jsonify(vuelos_texto)


#----------------------------------------------------------------------------------------------------------------------------------------------

@app.route('/info')
def info_vuelo():
    id_vuelo = request.args.get('id')  # Obt√©n el id del vuelo desde la URL

    # Conexi√≥n a la base de datos
    connection = connect_to_dbA()
    cursor = connection.cursor()

    # Consulta SQL
    query = """
    SELECT 
        v.idVuelo, 
        v.fechaSalida, 
        v.horaSalida, 
        v.fechaActulizacion, 
        v.estado AS estadoVuelo,
        
        -- Informaci√≥n de la ruta comercial (Aeropuerto Origen y Destino)
        ao.descripcion AS aeropuertoOrigen,
        ad.descripcion AS aeropuertoDestino,
        
        -- Nombre de la aerol√≠nea
        a.nombreAerolinea,
        
        -- Informaci√≥n del avi√≥n
        av.nombreAvion,

        -- Informaci√≥n de los asientos
        asi.idAsiento,
        asi.numeroAsiento,
        asi.estado AS estadoAsiento,
        asi.fechaActulizacion AS fechaActualizacionAsiento,

        -- Informaci√≥n de la categor√≠a del asiento
        cat.nombreCategoria,           -- Nombre de la categor√≠a
        cat.precioAsiento,             -- Precio del asiento

        -- Agregar el id del asiento junto con la categor√≠a y el estado
        asi.fk_idCategoria AS idCategoriaAsiento,
        asi.fk_idAvion AS idAvionAsiento

    FROM Vuelo v
    -- Relaci√≥n con RutaComercial
    JOIN RutaComercial rc ON v.RutaComercial_idRutaComercial = rc.idRutaComercial
    JOIN Aeropuerto ao ON rc.fk_idAeropuertoOrigen = ao.idAeropuerto
    JOIN Aeropuerto ad ON rc.fk_idAeropuertoDestino = ad.idAeropuerto

    -- Relaci√≥n con Aerol√≠nea y Avi√≥n
    JOIN Aerolinea a ON v.Aerolinea_idAerolinea = a.idAerolinea
    JOIN Avion av ON v.Avion_idAvion = av.idAvion

    -- Relaci√≥n con los asientos y su categor√≠a
    JOIN Asiento asi ON av.idAvion = asi.fk_idAvion
    JOIN Categoria cat ON asi.fk_idCategoria = cat.idCategoria

    WHERE v.idVuelo = %s;
    """
    cursor.execute(query, (id_vuelo,))

    vuelo_info = cursor.fetchall()

    connection.close()

    # Pasar los resultados a la plantilla HTML
    return render_template('info.html', vuelo_info=vuelo_info)

#----------------------------------------------------------------------------------------------------------------------------------------------

@app.route('/reservar_asiento', methods=['POST'])
def reservar_asiento():
    try:
        # Obtener los datos del JSON enviado desde el frontend
        data = request.get_json()

        # Extraer los datos del JSON
        id_vuelo = data.get('idVuelo')
        id_asiento = data.get('idAsiento')
        nombre = data.get('nombrePasajero')
        primer_apellido = data.get('primerApellido')
        segundo_apellido = data.get('segundoApellido')
        pasaporte = data.get('pasaporte')
        estado = data.get('estadoAsiento')

        # Conectar a la base de datos
        connection = connect_to_dbA()
        if connection is None:
            return jsonify({"mensaje": "‚ùå Error al conectar con la base de datos"}), 500

        cursor = connection.cursor()

        # Verificar si el pasajero ya existe en la base de datos
        query_verificar_pasajero = "SELECT idPasajero FROM Pasajero WHERE pasaporte = %s"
        cursor.execute(query_verificar_pasajero, (pasaporte,))
        pasajero_existente = cursor.fetchone()  # Obtiene el primer resultado si existe

        if pasajero_existente:
            mensaje = "‚úÖ El pasajero ya existe. Se actualiz√≥ su asiento."
        else:
            # Insertar el pasajero en la tabla Pasajero si no existe
            query_insert_pasajero = """
            INSERT INTO Pasajero (pasaporte, nombre, primerApellido, segundoApellido, fk_idVuelo)
            VALUES (%s, %s, %s, %s, %s)
            """
            cursor.execute(query_insert_pasajero, (pasaporte, nombre, primer_apellido, segundo_apellido, id_vuelo))
            mensaje = "‚úÖ Nuevo pasajero registrado y asiento actualizado."

        # Actualizar el estado del asiento en la tabla Asiento
        query_actualizar_asiento = """
        UPDATE Asiento
        SET estado = %s
        WHERE idAsiento = %s
        """
        cursor.execute(query_actualizar_asiento, (estado, id_asiento))


        # Actualizar la fechaActualizacion en la tabla Vuelo
        query_actualizar_fecha = """
        UPDATE Vuelo
        SET fechaActulizacion = UNIX_TIMESTAMP()
        WHERE idVuelo = %s
        """
        cursor.execute(query_actualizar_fecha, (id_vuelo,))

        # Confirmar los cambios
        connection.commit()
        connection.close()

        # Retornar la respuesta JSON al frontend
        return jsonify({"mensaje": mensaje})

    except Exception as e:
        return jsonify({"mensaje": f"‚ùå Error en el servidor: {e}"}), 500


#----------------------------------------------------------------------------------------------------------------------------------------------

@app.route('/obtener_pasajero', methods=['POST'])
def obtener_pasajero():
    data = request.get_json()
    id_asiento = data.get('idAsiento')

    conn = connect_to_dbA()
    cursor = conn.cursor(dictionary=True)

    query = """
        SELECT p.nombre, p.primerApellido, p.segundoApellido, p.pasaporte
        FROM Pasajero p
        JOIN Vuelo v ON p.fk_idVuelo = v.idVuelo
        JOIN Avion av ON v.Avion_idAvion = av.idAvion
        JOIN Asiento a ON a.fk_idAvion = av.idAvion
        WHERE a.idAsiento = %s
        ORDER BY p.idPasajero DESC
        LIMIT 1;
    """

    cursor.execute(query, (id_asiento,))
    pasajero = cursor.fetchone()
    conn.close()

    return jsonify(pasajero if pasajero else {})

@app.route('/info')
def info():
    return render_template('info.html')


#----------------------------------------------------------------------------------------------------------------------------------------------

# Ejecutar la consulta al iniciar la aplicaci√≥n y antes de cada solicitud
@app.before_request
def before_request():
    global db_connection, query_executed  # Declarar las variables globales dentro de la funci√≥n
    # Asegurarse de que la base de datos est√© conectada antes de cada solicitud
    if db_connection is None or not db_connection.is_connected():
        connect_to_dbA()

    # Ejecutar la consulta solo la primera vez
    if not query_executed:
        print("üöÄ Ejecutando consulta al iniciar la aplicaci√≥n...")
        execute_query_and_print()  # Llamar la funci√≥n para ejecutar la consulta inmediatamente al inicio
        query_executed = True  # Marcar la bandera como True para evitar ejecutar la consulta nuevamente


if __name__ == '__main__':
    app.run(debug=True)