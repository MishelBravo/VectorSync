from flask import Flask, request, jsonify, render_template
import mysql.connector
import firebase_admin
from firebase_admin import credentials, firestore
import time
import threading

app = Flask(__name__, template_folder="templates")  # üü¢ Define la carpeta de templates

# üîπ Inicializar Firebase.
try:
    cred = credentials.Certificate("key.json")  # Aseg√∫rate de tener el archivo key.json
    firebase_admin.initialize_app(cred)
    db_firestore = firestore.client()
    print("‚úÖ Conectado a Firebase correctamente.")
except Exception as e:
    print(f"‚ùå Error al conectar con Firebase: {e}")

# üîπ Conectar a ambas bases de datos MySQL
def connect_to_mysql(database_name):
    try:
        conn = mysql.connector.connect(
            host="localhost",   # Direcci√≥n del servidor MySQL
            user="root",        # Usuario de MySQL
            password="admin",   # Contrase√±a de MySQL
            database=database_name  # Nombre de la base de datos (dbaeropuerto_a o dbaeropuerto_c)
        )
        return conn
    except mysql.connector.Error as err:
        print(f"‚ùå Error al conectar con MySQL ({database_name}): {err}")
        return None

# Crear conexiones simult√°neas
conn_mysql_a = connect_to_mysql("dbaeropuerto_a")  # Base de datos en Norteam√©rica (asumido)
conn_mysql_c = connect_to_mysql("dbaeropuerto_c")  # Base de datos en Sudam√©rica
# Firebase debe estar en Europa
firebase_db = None  # Firebase no necesita conexi√≥n en este caso.

# üîπ Implementaci√≥n de Relojes Vectoriales para sincronizaci√≥n
vector_clock = {"dbaeropuerto_a": 0, "dbaeropuerto_b": 0, "dbaeropuerto_c": 0}

# üîπ Funci√≥n para sincronizar datos entre servidores
def sync_data():
    while True:
        # Simulaci√≥n de sincronizaci√≥n cada 5 segundos
        time.sleep(5)
        print("üîÑ Sincronizando datos entre servidores...")

        # Incrementar el reloj vectorial
        vector_clock["dbaeropuerto_a"] += 1
        vector_clock["dbaeropuerto_b"] += 1
        vector_clock["dbaeropuerto_c"] += 1

        print(f"üïí Estado del Reloj Vectorial: {vector_clock}")

# Ejecutar sincronizaci√≥n en un hilo aparte
sync_thread = threading.Thread(target=sync_data)
sync_thread.daemon = True
sync_thread.start()

# üîπ Diccionario actualizado de pa√≠ses por continente
countries = {
    "√Åfrica": [
        "Argelia", "Angola", "Ben√≠n", "Botsuana", "Burkina Faso", "Burundi", "Cabo Verde", 
        "Camer√∫n", "Rep√∫blica Centroafricana", "Chad", "Comoras", "Congo", "Rep√∫blica Democr√°tica del Congo", 
        "Costa de Marfil", "Djibouti", "Egipto", "Guinea Ecuatorial", "Eritrea", "Esuatini", "Etiop√≠a", 
        "Gab√≥n", "Gambia", "Ghana", "Guinea", "Guinea-Bis√°u", "Kenia", "Lesoto", "Liberia", "Libia", 
        "Madagascar", "Malawi", "Mal√≠", "Mauricio", "Mauritania", "Mozambique", "Namibia", "N√≠ger", "Nigeria", 
        "Ruanda", "Santo Tom√© y Pr√≠ncipe", "Senegal", "Seychelles", "Sierra Leona", "Somalia", "Sud√°frica", 
        "Sud√°n", "Tanzania", "Togo", "T√∫nez", "Uganda", "Zambia", "Zimbabue"
    ],
    "Asia": [
        "Afganist√°n", "Armenia", "Azerbaiy√°n", "Bahrein", "Banglad√©s", "Birmania (Myanmar)", "But√°n", "Brun√©i", 
        "Camboya", "China", "Chipre", "Corea del Norte", "Corea del Sur", "Emiratos √Årabes Unidos", 
        "Georgia", "India", "Indonesia", "Irak", "Ir√°n", "Israel", "Jap√≥n", "Jordania", "Kazajist√°n", 
        "Kenia", "Kuwait", "Kirgist√°n", "Laos", "L√≠bano", "Malasia", "Maldivas", "Mongolia", "Nepal", "Om√°n", 
        "Pakist√°n", "Palestina", "Filipinas", "Qatar", "Rusia", "Arabia Saudita", "Singapur", "Sri Lanka", 
        "Siria", "Tayikist√°n", "Tailandia", "Timor Oriental", "Turkmenist√°n", "Emiratos √Årabes Unidos", 
        "Uzbekist√°n", "Vietnam", "Yemen"
    ],
    "Europa": [
        "Albania", "Alemania", "Andorra", "Armenia", "Austria", "B√©lgica", "Bielorrusia", "Bosnia y Herzegovina", 
        "Bulgaria", "Chipre", "Croacia", "Dinamarca", "Eslovaquia", "Eslovenia", "Espa√±a", "Estonia", "Finlandia", 
        "Francia", "Georgia", "Grecia", "Hungr√≠a", "Irlanda", "Islandia", "Italia", "Kazajist√°n", "Kosovo", 
        "Letonia", "Liechtenstein", "Lituania", "Luxemburgo", "Malta", "Moldavia", "M√≥naco", "Montenegro", "Noruega", 
        "Pa√≠ses Bajos", "Polonia", "Portugal", "Reino Unido", "Rep√∫blica Checa", "Ruman√≠a", "San Marino", "Serbia", 
        "Suecia", "Suiza", "Ucrania"
    ],
    "Am√©rica del Sur": [
        "Argentina", "Bolivia", "Brasil", "Chile", "Colombia", "Ecuador", "Guyana", "Paraguay", "Per√∫", "Surinam", 
        "Uruguay", "Venezuela"
    ],
    "Am√©rica del Norte": [
        "Canad√°", "Estados Unidos", "M√©xico"
    ],
    "Ocean√≠a": [
        "Australia", "Fiyi", "Islas Marshall", "Micronesia", "Nauru", "Nueva Zelanda", "Palau", "Pap√∫a Nueva Guinea", 
        "Samoa", "Islas Salom√≥n", "Tonga", "Tuvalu", "Vanuatu"
    ],
    "Ant√°rtida": [
        "Ant√°rtida"
    ]
}

# Funci√≥n que determina el servidor m√°s cercano seg√∫n el pa√≠s
def get_server_for_country(country):
    # Recorremos el diccionario de pa√≠ses por continente
    for continent, countries_list in countries.items():
        if country in countries_list:
            # Si el pa√≠s est√° en Am√©rica del Norte, usa dbaeropuerto_a
            if continent == "Am√©rica del Norte":
                return "Conectando a dbaeropuerto_a (MySQL) en Am√©rica del Norte"
            # Si el pa√≠s est√° en Am√©rica del Sur, usa dbaeropuerto_c
            elif continent == "Am√©rica del Sur":
                return "Conectando a dbaeropuerto_c (MySQL) en Am√©rica del Sur"
            # Si el pa√≠s est√° en Europa, usa dbaeropuerto_b
            elif continent == "Europa":
                return "Conectando a dbaeropuerto_b (Firebase) en Europa"
            # Si el pa√≠s no est√° en los continentes definidos
            else:
                return "No hay servidor disponible para este continente"
    
    # Si el pa√≠s no se encuentra en ninguna lista de continentes
    return "Pa√≠s no reconocido"

# Ejemplo de uso
country_input = "Espa√±a"  # Ejemplo de pa√≠s
server_connection = get_server_for_country(country_input)
print(server_connection)

# üîπ Ruta para determinar la base de datos a utilizar
@app.route('/connect', methods=['POST'])
def connect():
    country = request.json.get('country')
    continent = None

    # Identificar continente
    for cont, country_list in countries.items():
        if country in country_list:
            continent = cont
            break

    response = {"message": ""}

    # Determinar a qu√© servidor conectar
    if continent == "Europa":
        response["message"] = f"Conectado a Firebase dbaeropuerto_b (Europa)."
    elif continent == "Asia":
        response["message"] = f"Conectado a Firebase dbaeropuerto_b (Asia)."
    elif continent == "Am√©rica del Sur":
        if conn_mysql_c:
            response["message"] = f"Conectado a la base de datos dbaeropuerto_c (Sudam√©rica) (MySQL)."
    elif continent == "Am√©rica del Norte":
        if conn_mysql_a:
            response["message"] = f"Conectado a la base de datos dbaeropuerto_a (Norteam√©rica) (MySQL)."
    elif continent == "√Åfrica":
        response["message"] = f"Conectado a la base de datos dbaeropuerto_a (√Åfrica)Norteam√©rica(MySQL)."
    elif continent == "Ant√°rtida":
        response["message"] = f"No hay servidores disponibles para la Ant√°rtida."
    else:
        return jsonify({"message": "Pa√≠s no encontrado. Verifica el nombre."}), 400


    return jsonify(response)

# Ruta principal para mostrar la p√°gina
@app.route('/')
def home():
    return render_template('index.html')  # üü¢ Retorna el archivo index.html

if __name__ == '__main__':
    app.run(debug=True)
